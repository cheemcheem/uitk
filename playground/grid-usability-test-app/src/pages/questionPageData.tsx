import { DataGridProps } from "@jpmorganchase/uitk-grid";
import { QuestionPageProps } from "./QuestionPage";
import {
  exampleRows1,
  exampleRows2,
  exampleRows3,
  exampleRows4,
  exampleRows5,
  exampleRows6,
  exampleRows7,
  exampleRows8,
  exampleRows9,
  questionText1,
  questionText2,
  questionText3,
  questionText4,
  questionText5,
  questionText6,
  questionText7,
  questionText8,
  questionText9,
  TableExample1,
  TableExample2,
  TableExample3,
  TableExample4,
  TableExample5,
  TableExample6,
  TableExample7,
  TableExample8,
  TableExample9,
} from "../questions";

export const q1: QuestionPageProps = {
  questionNumber: 1,
  text: questionText1,
  gridProps: {
    isZebra: true,
    rowSelectionMode: "multi",
    showCheckboxes: true,
    data: exampleRows1,
    rowKeyGetter: (x) => x.id,
    columnDefinitions: [
      {
        key: "rfeId",
        width: 86,
        title: "RFE ID",
        field: "rfeId",
        type: "text",
        pinned: "left",
      },
      {
        key: "bookingStatus",
        width: 103,
        title: "Booking Status",
        field: "bookingStatus",
        type: "text",
      },
      {
        key: "orderId",
        width: 61,
        title: "Order ID",
        field: "orderId",
        type: "text",
      },
      {
        key: "traderId",
        width: 71,
        title: "Trader ID",
        field: "traderId",
        type: "text",
      },
      {
        key: "send",
        width: 69,
        title: "Send",
        field: "send",
        type: "text",
      },
      {
        key: "modified",
        width: 72,
        title: "Modified",
        field: "modified",
        type: "text",
      },
      {
        key: "clientName",
        width: 174,
        title: "Client Name",
        field: "clientName",
        type: "text",
      },
      {
        key: "symbol",
        width: 70,
        title: "Symbol",
        field: "symbol",
        type: "text",
      },
      {
        key: "name",
        width: 139,
        title: "Name",
        field: "name",
        type: "text",
      },
      {
        key: "side",
        width: 51,
        title: "Side",
        field: "side",
        type: "text",
      },
      {
        key: "qty",
        width: 62,
        title: "Qty",
        field: "qty",
        type: "text",
      },
      {
        key: "exQty",
        width: 62,
        title: "Ex Qty",
        field: "exQty",
        type: "text",
      },
      {
        key: "remaining",
        width: 80,
        title: "Remaining",
        field: "remaining",
        type: "text",
      },
      {
        key: "cancelled",
        width: 72,
        title: "Cancelled",
        field: "cancelled",
        type: "text",
      },
      {
        key: "price",
        width: 57,
        title: "Price",
        field: "price",
        type: "text",
      },
      {
        key: "exAvgPx",
        width: 65,
        title: "Ex AvgPx",
        field: "exAvgPx",
        type: "text",
      },
      {
        key: "orderStatus",
        width: 90,
        title: "Order Status",
        field: "orderStatus",
        type: "text",
      },
      {
        key: "comments",
        width: 86,
        title: "Comments",
        field: "comments",
        type: "text",
      },
      {
        key: "pos",
        width: 57,
        title: "Pos",
        field: "pos",
        type: "text",
      },
    ],
  },
  table: TableExample1,
};

export const q2: QuestionPageProps = {
  questionNumber: 2,
  text: questionText2,
  gridProps: {
    isZebra: true,
    rowSelectionMode: "multi",
    showCheckboxes: true,
    data: exampleRows2,
    rowKeyGetter: (x) => x.id,
    columnDefinitions: [
      {
        key: "timestamp",
        width: 88,
        title: "Timestamp",
        field: "timestamp",
        type: "text",
        pinned: "left",
      },
      {
        key: "jpmDirection",
        width: 88,
        title: "JPM Direction",
        field: "jpmDirection",
        type: "text",
      },
      {
        key: "notional",
        width: 81,
        title: "Notional",
        field: "notional",
        type: "text",
      },
      {
        key: "ccy",
        width: 44,
        title: "CCY",
        field: "ccy",
        type: "text",
      },
      {
        key: "instrument",
        width: 81,
        title: "Instrument",
        field: "instrument",
        type: "text",
      },
      {
        key: "issuer",
        width: 295,
        title: "Issuer",
        field: "issuer",
        type: "text",
      },
      {
        key: "matDate",
        width: 75,
        title: "Mat Date",
        field: "matDate",
        type: "text",
      },
      {
        key: "spread",
        width: 53,
        title: "Spread",
        field: "spread",
        type: "text",
      },
      {
        key: "price",
        width: 72,
        title: "Price",
        field: "price",
        type: "text",
      },
      {
        key: "upfrontFee",
        width: 88,
        title: "Upfront Fee",
        field: "upfrontFee",
        type: "text",
      },
      {
        key: "cpn",
        width: 53,
        title: "CPN",
        field: "cpn",
        type: "text",
      },
      {
        key: "counterparty",
        width: 255,
        title: "Counterparty",
        field: "counterparty",
        type: "text",
      },
      {
        key: "cptySpn",
        width: 76,
        title: "Cpty SPN",
        field: "cptySpn",
        type: "text",
      },
      {
        key: "cv",
        width: 55,
        title: "CV",
        field: "cv",
        type: "text",
      },
      {
        key: "clientContact",
        width: 120,
        title: "Client Contact",
        field: "clientContact",
        type: "text",
      },
    ],
  },
  table: TableExample2,
};

export const q3: QuestionPageProps = {
  questionNumber: 3,
  text: questionText3,
  gridProps: {
    isZebra: true,
    rowSelectionMode: "multi",
    showCheckboxes: true,
    data: exampleRows3,
    rowKeyGetter: (x) => x.id,
    columnDefinitions: [
      {
        key: "tradeId",
        width: 97,
        title: "Trade Id",
        field: "tradeId",
        type: "text",
        pinned: "left",
      },
      {
        key: "source",
        width: 74,
        title: "Source",
        field: "source",
        type: "text",
      },
      {
        key: "origination",
        width: 81,
        title: "Origination",
        field: "origination",
        type: "text",
      },
      {
        key: "market",
        width: 78,
        title: "Market",
        field: "market",
        type: "text",
      },
      {
        key: "matchingTradeId",
        width: 120,
        title: "Matching Trade Id",
        field: "matchingTradeId",
        type: "text",
      },
      {
        key: "matchTime",
        width: 83,
        title: "Match Time",
        field: "matchTime",
        type: "text",
      },
      {
        key: "bookingStatus",
        width: 96,
        title: "Booking Status",
        field: "bookingStatus",
        type: "text",
      },
      {
        key: "clientAccountName",
        width: 189,
        title: "Client Account Name",
        field: "clientAccountName",
        type: "text",
      },
      {
        key: "jpmDirection",
        width: 88,
        title: "JPM Direction",
        field: "jpmDirection",
        type: "text",
      },
      {
        key: "notional",
        width: 76,
        title: "Notional",
        field: "notional",
        type: "text",
      },
      {
        key: "description",
        width: 171,
        title: "Description",
        field: "description",
        type: "text",
      },
      {
        key: "levelDecimal",
        width: 104,
        title: "Level (decimal)",
        field: "level(decimal)",
        type: "text",
      },
      {
        key: "levelType",
        width: 76,
        title: "Level Type",
        field: "levelType",
        type: "text",
      },
    ],
  },
  table: TableExample3,
};

export const q4: QuestionPageProps = {
  questionNumber: 4,
  text: questionText4,
  gridProps: {
    isZebra: true,
    rowSelectionMode: "multi",
    showCheckboxes: true,
    data: exampleRows4,
    rowKeyGetter: (x) => x.id,

    columnDefinitions: [
      {
        key: "account",
        width: 87,
        title: "Account",
        field: "account",
        type: "text",
        // pinned: "left",
      },
      {
        key: "userId",
        width: 68,
        title: "User ID",
        field: "userId",
        type: "text",
      },
      {
        key: "tradeId",
        width: 90,
        title: "Trade ID",
        field: "tradeId",
        type: "text",
      },
      {
        key: "tradeDate",
        width: 89,
        title: "Trade Date",
        field: "tradeDate",
        type: "text",
      },
      {
        key: "status",
        width: 62,
        title: "Status",
        field: "status",
        type: "text",
      },
      {
        key: "lastUpdated",
        width: 160,
        title: "Last Updated",
        field: "lastUpdated",
        type: "text",
      },
      {
        key: "cashType",
        width: 78,
        title: "Cash Type",
        field: "cashType",
        type: "text",
      },
      {
        key: "ccyPair",
        width: 71,
        title: "CCY Pair",
        field: "ccyPair",
        type: "text",
      },
      {
        key: "direction",
        width: 133,
        title: "Direction (Dealt CCY)",
        field: "direction(dealtCcy)",
        type: "text",
      },
      {
        key: "valueDate",
        width: 88,
        title: "Value Date",
        field: "valueDate",
        type: "text",
      },
      {
        key: "dealtCcy",
        width: 78,
        title: "Dealt CCY",
        field: "dealtCcy",
        type: "text",
      },
      {
        key: "amount",
        width: 100,
        title: "Amount",
        field: "amount",
        type: "text",
      },
      {
        key: "baseCcy",
        width: 76,
        title: "Base CCY",
        field: "baseCcy",
        type: "text",
      },
      {
        key: "baseAmt",
        width: 99,
        title: "Base AMT",
        field: "baseAmt",
        type: "text",
      },
      {
        key: "termCcy",
        width: 73,
        title: "Term CCY",
        field: "termCcy",
        type: "text",
      },
      {
        key: "termAmt",
        width: 91,
        title: "Term AMT",
        field: "termAmt",
        type: "text",
      },
      {
        key: "spotRate",
        width: 76,
        title: "Spot Rate",
        field: "spotRate",
        type: "text",
      },
    ],
  },
  table: TableExample4,
};

export const q5: QuestionPageProps = {
  questionNumber: 5,
  text: questionText5,
  gridProps: {
    isZebra: true,
    rowSelectionMode: "multi",
    showCheckboxes: true,
    data: exampleRows5,
    rowKeyGetter: (x) => x.id,

    columnDefinitions: [
      {
        key: "traderName",
        width: 100,
        title: "Trader Name",
        field: "traderName",
        type: "text",
      },
      {
        key: "ecurityType",
        width: 100,
        title: "Security Type",
        field: "securityType",
        type: "text",
      },
      {
        key: "description",
        width: 100,
        title: "Description",
        field: "description",
        type: "text",
      },
      {
        key: "jpmDirection",
        width: 100,
        title: "JPM Direction",
        field: "jpmDirection",
        type: "text",
      },
      {
        key: "notional",
        width: 100,
        title: "Notional",
        field: "notional",
        type: "text",
      },
      {
        key: "level(decimal)",
        width: 100,
        title: "Level (decimal)",
        field: "level(decimal)",
        type: "text",
      },
      {
        key: "levelType",
        width: 100,
        title: "Level Type",
        field: "levelType",
        type: "text",
      },
      {
        key: "yield",
        width: 100,
        title: "Yield",
        field: "yield",
        type: "text",
      },
      {
        key: "tradeDate",
        width: 100,
        title: "Trade Date",
        field: "tradeDate",
        type: "text",
      },
      {
        key: "settlementDate",
        width: 100,
        title: "Settlement Date",
        field: "settlementDate",
        type: "text",
      },
      {
        key: "principal(bondccy)",
        width: 100,
        title: "Principal (BondCcy)",
        field: "principal(bondccy)",
        type: "text",
      },
      {
        key: "accruedInterest(bondccy)",
        width: 100,
        title: "Accrued Interest (BondCcy)",
        field: "accruedInterest(bondccy)",
        type: "text",
      },
      {
        key: "totalSettlAmt(bondccy)",
        width: 100,
        title: "Total Settl Amt (BondCcy)",
        field: "totalSettlAmt(bondccy)",
        type: "text",
      },
      {
        key: "settlementCcy",
        width: 100,
        title: "Settlement CCY",
        field: "settlementCcy",
        type: "text",
      },
      {
        key: "salesQuality",
        width: 100,
        title: "Sales Quality",
        field: "salesQuality",
        type: "text",
      },
      {
        key: "riskSalesQuality",
        width: 100,
        title: "Risk Sales Quality",
        field: "riskSalesQuality",
        type: "text",
      },
      {
        key: "totalCv",
        width: 100,
        title: "Total CV",
        field: "totalCv",
        type: "text",
      },
      {
        key: "totalCv$",
        width: 100,
        title: "Total CV $",
        field: "totalCv$",
        type: "text",
      },
      { key: "cv$", width: 100, title: "CV $", field: "cv$", type: "text" },
      {
        key: "riskFinalTotalCv",
        width: 100,
        title: "Risk Final Total CV",
        field: "riskFinalTotalCv",
        type: "text",
      },
      {
        key: "riskFinalTotalCv$",
        width: 100,
        title: "Risk Final Total CV $",
        field: "riskFinalTotalCv$",
        type: "text",
      },
      {
        key: "clientContact",
        width: 100,
        title: "Client Contact",
        field: "clientContact",
        type: "text",
      },
      {
        key: "salespersonName",
        width: 100,
        title: "Salesperson Name",
        field: "salespersonName",
        type: "text",
      },
      {
        key: "jpmCrfle",
        width: 100,
        title: "JPM CRFLE",
        field: "jpmCrfle",
        type: "text",
      },
      {
        key: "jpmLegalEntity",
        width: 100,
        title: "JPM Legal Entity",
        field: "jpmLegalEntity",
        type: "text",
      },
      {
        key: "cusip",
        width: 100,
        title: "CUSIP",
        field: "cusip",
        type: "text",
      },
      {
        key: "instrumentCcy",
        width: 100,
        title: "Instrument CCY",
        field: "instrumentCcy",
        type: "text",
      },
      {
        key: "distributionChannel",
        width: 100,
        title: "Distribution Channel",
        field: "distributionChannel",
        type: "text",
      },
      {
        key: "clientName",
        width: 100,
        title: "Client Name",
        field: "clientName",
        type: "text",
      },
      { key: "ISIN", width: 100, title: "isin", field: "isin", type: "text" },
      {
        key: "level(32nd)",
        width: 100,
        title: "Level (32nd)",
        field: "level(32nd)",
        type: "text",
      },
      {
        key: "salesTeam",
        width: 100,
        title: "Sales Team",
        field: "salesTeam",
        type: "text",
      },
      {
        key: "benchmarkSecurity",
        width: 100,
        title: "Benchmark Security",
        field: "benchmarkSecurity",
        type: "text",
      },
    ],
  },
  table: TableExample5,
};

export const q6: QuestionPageProps = {
  questionNumber: 6,
  text: questionText6,
  gridProps: {
    isZebra: true,
    rowSelectionMode: "multi",
    showCheckboxes: true,
    data: exampleRows6,
    rowKeyGetter: (x) => x.id,
    columnGroupDefinitions: [
      {
        key: "orderStatus",
        columnKeys: [
          "strategyType",
          "cmdStatus",
          "symbol",
          "progress",
          "alogstate",
        ],
        title: "Order Status",
      },
      {
        key: "slippagePnl",
        columnKeys: ["slpnl$", "slpnldelta"],
        title: "Slippage Pnl.",
      },
      {
        key: "pnlBenchmark",
        columnKeys: ["mid$", "middelta", "book$", "bookdelta"],
        title: "PnL Benchmark",
      },
    ],
    columnDefinitions: [
      {
        key: "strategyType",
        width: 100,
        title: "Strategy Type",
        field: "strategyType",
        type: "text",
      },
      {
        key: "cmdStatus",
        width: 100,
        title: "Cmd Status",
        field: "cmdStatus",
        type: "text",
      },
      {
        key: "symbol",
        width: 100,
        title: "Symbol",
        field: "symbol",
        type: "text",
      },
      { key: "user", width: 100, title: "user", field: "user", type: "text" },
      {
        key: "progress",
        width: 100,
        title: "Progress",
        field: "progress",
        type: "text",
      },
      {
        key: "alogstate",
        width: 100,
        title: "AlogState",
        field: "alogstate",
        type: "text",
      },
      {
        key: "slpnl$",
        width: 100,
        title: "$",
        field: "slpnl$",
        type: "text",
      },
      {
        key: "slpnldelta",
        width: 100,
        title: "δ",
        field: "slpnldelta",
        type: "text",
      },
      { key: "mid$", width: 100, title: "Mid $", field: "mid$", type: "text" },
      {
        key: "middelta",
        width: 100,
        title: "Mid δ",
        field: "middelta",
        type: "text",
      },
      {
        key: "book$",
        width: 100,
        title: "Book $",
        field: "book$",
        type: "text",
      },
      {
        key: "bookdelta",
        width: 100,
        title: "Book δ",
        field: "bookdelta",
        type: "text",
      },
    ],
  },
  table: TableExample6,
};

export const q7: QuestionPageProps = {
  questionNumber: 7,
  text: questionText7,
  gridProps: {
    isZebra: true,
    rowSelectionMode: "multi",
    showCheckboxes: true,
    data: exampleRows7,
    rowKeyGetter: (x) => x.id,

    columnDefinitions: [
      {
        key: "tradeId",
        width: 100,
        title: "tradeId",
        field: "tradeId",
        type: "text",
      },
      {
        key: "tradeDate",
        width: 100,
        title: "tradeDate",
        field: "tradeDate",
        type: "text",
      },
      {
        key: "bookingStatus",
        width: 100,
        title: "bookingStatus",
        field: "bookingStatus",
        type: "text",
      },
      {
        key: "tradeAction",
        width: 100,
        title: "tradeAction",
        field: "tradeAction",
        type: "text",
      },
      {
        key: "salespersonName",
        width: 100,
        title: "salespersonName",
        field: "salespersonName",
        type: "text",
      },
      {
        key: "jpmDirection",
        width: 100,
        title: "jpmDirection",
        field: "jpmDirection",
        type: "text",
      },
      {
        key: "instrument",
        width: 100,
        title: "instrument",
        field: "instrument",
        type: "text",
      },
      {
        key: "issuer",
        width: 100,
        title: "issuer",
        field: "issuer",
        type: "text",
      },
      {
        key: "notional",
        width: 100,
        title: "notional",
        field: "notional",
        type: "text",
      },
      { key: "ccy", width: 100, title: "ccy", field: "ccy", type: "text" },
      {
        key: "price",
        width: 100,
        title: "price",
        field: "price",
        type: "text",
      },
      {
        key: "upfrontFee",
        width: 100,
        title: "upfrontFee",
        field: "upfrontFee",
        type: "text",
      },
      { key: "cpn", width: 100, title: "cpn", field: "cpn", type: "text" },
      {
        key: "counterparty",
        width: 100,
        title: "counterparty",
        field: "counterparty",
        type: "text",
      },
      {
        key: "cptySpn",
        width: 100,
        title: "cptySpn",
        field: "cptySpn",
        type: "text",
      },
      { key: "cv", width: 100, title: "cv", field: "cv", type: "text" },
      {
        key: "clientContact",
        width: 100,
        title: "clientContact",
        field: "clientContact",
        type: "text",
      },
      {
        key: "traderName",
        width: 100,
        title: "traderName",
        field: "traderName",
        type: "text",
      },
    ],
  },
  table: TableExample7,
};

export const q8: QuestionPageProps = {
  questionNumber: 8,
  text: questionText8,
  gridProps: {
    isZebra: true,
    rowSelectionMode: "multi",
    showCheckboxes: true,
    data: exampleRows8,
    rowKeyGetter: (x) => x.id,

    columnDefinitions: [
      {
        key: "source",
        width: 100,
        title: "source",
        field: "source",
        type: "text",
      },
      {
        key: "origination",
        width: 100,
        title: "origination",
        field: "origination",
        type: "text",
      },
      {
        key: "clientAccountName",
        width: 100,
        title: "clientAccountName",
        field: "clientAccountName",
        type: "text",
      },
      {
        key: "jpmDirection",
        width: 100,
        title: "jpmDirection",
        field: "jpmDirection",
        type: "text",
      },
      {
        key: "notional",
        width: 100,
        title: "notional",
        field: "notional",
        type: "text",
      },
      {
        key: "description",
        width: 100,
        title: "description",
        field: "description",
        type: "text",
      },
      {
        key: "level(decimal)",
        width: 100,
        title: "level(decimal)",
        field: "level(decimal)",
        type: "text",
      },
      {
        key: "tradeDate",
        width: 100,
        title: "tradeDate",
        field: "tradeDate",
        type: "text",
      },
      {
        key: "tradeId",
        width: 100,
        title: "tradeId",
        field: "tradeId",
        type: "text",
      },
      {
        key: "settlementDate",
        width: 100,
        title: "settlementDate",
        field: "settlementDate",
        type: "text",
      },
      {
        key: "bookingStatus",
        width: 100,
        title: "bookingStatus",
        field: "bookingStatus",
        type: "text",
      },
      {
        key: "traderName",
        width: 100,
        title: "traderName",
        field: "traderName",
        type: "text",
      },
      {
        key: "principal(bondccy)",
        width: 100,
        title: "principal(bondccy)",
        field: "principal(bondccy)",
        type: "text",
      },
      {
        key: "accruedInterest(bondccy)",
        width: 100,
        title: "accruedInterest(bondccy)",
        field: "accruedInterest(bondccy)",
        type: "text",
      },
      {
        key: "totalSettlAmt(bondccy)",
        width: 100,
        title: "totalSettlAmt(bondccy)",
        field: "totalSettlAmt(bondccy)",
        type: "text",
      },
      {
        key: "settlementCcy",
        width: 100,
        title: "settlementCcy",
        field: "settlementCcy",
        type: "text",
      },
      {
        key: "salesQuality",
        width: 100,
        title: "salesQuality",
        field: "salesQuality",
        type: "text",
      },
      {
        key: "riskSalesQuality",
        width: 100,
        title: "riskSalesQuality",
        field: "riskSalesQuality",
        type: "text",
      },
      {
        key: "totalCv",
        width: 100,
        title: "totalCv",
        field: "totalCv",
        type: "text",
      },
      {
        key: "totalCv$",
        width: 100,
        title: "totalCv$",
        field: "totalCv$",
        type: "text",
      },
      {
        key: "riskFinalTotalCv",
        width: 100,
        title: "riskFinalTotalCv",
        field: "riskFinalTotalCv",
        type: "text",
      },
      {
        key: "riskFinalTotalCv$",
        width: 100,
        title: "riskFinalTotalCv$",
        field: "riskFinalTotalCv$",
        type: "text",
      },
    ],
  },
  table: TableExample8,
};

export const q9: QuestionPageProps = {
  questionNumber: 9,
  text: questionText9,
  gridProps: {
    isZebra: true,
    rowSelectionMode: "multi",
    showCheckboxes: true,
    data: exampleRows9,
    rowKeyGetter: (x) => x.id,

    columnDefinitions: [
      {
        key: "orderId",
        width: 100,
        title: "orderId",
        field: "orderId",
        type: "text",
      },
      { key: "side", width: 100, title: "side", field: "side", type: "text" },
      { key: "qty", width: 100, title: "qty", field: "qty", type: "text" },
      {
        key: "symbol",
        width: 100,
        title: "symbol",
        field: "symbol",
        type: "text",
      },
      { key: "name", width: 100, title: "name", field: "name", type: "text" },
      {
        key: "clientName",
        width: 100,
        title: "clientName",
        field: "clientName",
        type: "text",
      },
      {
        key: "status",
        width: 100,
        title: "status",
        field: "status",
        type: "text",
      },
      {
        key: "execQty",
        width: 100,
        title: "execQty",
        field: "execQty",
        type: "text",
      },
      {
        key: "remaining",
        width: 100,
        title: "remaining",
        field: "remaining",
        type: "text",
      },
      {
        key: "cancelled",
        width: 100,
        title: "cancelled",
        field: "cancelled",
        type: "text",
      },
      {
        key: "price",
        width: 100,
        title: "price",
        field: "price",
        type: "text",
      },
      {
        key: "execAvgpx",
        width: 100,
        title: "execAvgpx",
        field: "execAvgpx",
        type: "text",
      },
      {
        key: "comments",
        width: 100,
        title: "comments",
        field: "comments",
        type: "text",
      },
      {
        key: "traderId",
        width: 100,
        title: "traderId",
        field: "traderId",
        type: "text",
      },
      {
        key: "modified",
        width: 100,
        title: "modified",
        field: "modified",
        type: "text",
      },
    ],
  },
  table: TableExample9,
};
